<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>EESCCode</web>
  <name>Home</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1416921670000</creationDate>
  <date>1417536910000</date>
  <contentUpdateDate>1417536910000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
#*
 * Main webhome
 *  -----------
 *
 * This sheet presents all the spaces that a user can access.  This includes his own personal space and all of the spaces linked to the group he is in.
 *
 * Author: Jean SIMARD (jean.simard@xwiki.com)
 *#
#set($discard = $xwiki.ssx.use('TaskManager.TaskManagerClass'))
##############################################
##                 GLOBALS
##############################################
## GLOBAL VARIABLES
#set($userId = $xcontext.getUserReference().name)
#set($groupsForUser = $services.eesc.getGroupsForUser($userId))
#set($groupUID = $request.getParameter('GROUP_ID'))
##############################################
##                 LIST PROJECTS
##############################################
#if($groupUID)
  #set($query_select = "distinct doc.fullName, doc.title")
  #set($query_from = "XWikiDocument doc, BaseObject as oshare, BaseObject as oright, LargeStringProperty as pusers, LargeStringProperty as pgroups")
  #set($query_where_share = "doc.fullName = oshare.name and oshare.className = 'EESCCode.CollaborativeProjectClass' and doc.fullName not like '%Template'")
  #set($query_where_right = "doc.fullName = oright.name and oright.className = 'XWiki.XWikiRights'")
  #set($query_where_groups = "pgroups.id.id = oright.id and pgroups.id.name = 'groups' and pgroups.value = 'XWiki.$groupUID'")
  #set($query_where = "${query_where_share} and ${query_where_right} and ( ${query_where_groups} )")
  #set($query = "select ${query_select} from ${query_from} where ${query_where}")
#else
  #set($query_select = "distinct doc.fullName, doc.title")
  #set($query_from = "XWikiDocument doc, BaseObject as oshare, BaseObject as oright, LargeStringProperty as pusers, LargeStringProperty as pgroups")
  #set($query_where_share = "doc.fullName = oshare.name and oshare.className = 'EESCCode.CollaborativeProjectClass' and doc.fullName not like '%Template'")
  #set($query_where_right = "doc.fullName = oright.name and oright.className = 'XWiki.XWikiRights'")
  #set($query_where_users = "pusers.id.id = oright.id and pusers.id.name = 'users' and pusers.value = '${xcontext.user}'")
  #set($query_where_groups_values = "pgroups.value = 'XWiki.XWikiAllGroup'")
  #set($sep = ' or ')
  #foreach($g in $groupsForUser)
    ## All groups has been prefixed with 'XWiki.' (for example, group '00123' is 'XWiki.00123')
    #set($query_where_groups_values = "${query_where_groups_values}${sep}pgroups.value = 'XWiki.${g.getId()}'")
  #end
  ## For XWiki.Admin, '${query_where_groups_values}' is empty so it will result in the following
  ## $query_where_groups =&gt; "pgroups.id.id = oright.id and pgroups.id.name = 'groups'"
  ## which will list every project with this property (no matter what value is in it); hence, all collaborative projects will be listed.
  #set($query_where_groups = "pgroups.id.id = oright.id and pgroups.id.name = 'groups'#if(${query_where_groups_values}!='') and ( ${query_where_groups_values} )#{end}")
  #set($query_where = "${query_where_share} and ${query_where_right} and ( ( ${query_where_users} ) or ( ${query_where_groups} ) )")
  #set($query = "select ${query_select} from ${query_from} where ${query_where}")
#end
#set($results = $services.query.hql($query).addFilter('hidden').addFilter('unique').execute())
#set($viewableprojects = {})
## Filter projects the user has access to
#foreach($project in $results)
  #set($projectreference = $services.model.resolveDocument($project.get(0)))
  #if($xwiki.checkAccess($projectreference, 'view'))
    #set($discard = $viewableprojects.put($projectreference, $project.get(1)))
  #end
#end
##
##
#set($listMyProjects = {})
#set($listMyTasks = [])
#if(!$viewableprojects.isEmpty())
  #foreach($project in $viewableprojects.entrySet())
    #set($currentProject = {})
    #set($projectreference = $project.key)
    #set($projecttitle = $project.value)
    #set($discard = $currentProject.put('title', $projecttitle))
    #set($discard = $currentProject.put('tasks', []))
    #set($query = "select distinct doc.fullName, task.name, task.status, task.assignee, task.duedate, task.progress from Document as doc, doc.object('TaskManager.TaskManagerClass') as task where task.project = '${projectreference}' order by task.duedate")
    #set($results = $services.query.xwql($query).execute())
    #foreach($task in $results)
      #set($currentTask = {})
      #set($taskreference = $services.model.resolveDocument($task.get(0)))
      #set($discard = $currentTask.put('project', $projecttitle))
      #set($discard = $currentTask.put('reference', $taskreference))
      #set($discard = $currentTask.put('name', $task.get(1)))
      #set($discard = $currentTask.put('status', $task.get(2)))
      #set($discard = $currentTask.put('assignee', $task.get(3)))
      #set($discard = $currentTask.put('duedate', $task.get(4)))
      #set($discard = $currentTask.put('progress', $task.get(5)))
      #set($discard = $currentProject.get('tasks').add($currentTask))
      #set($taskDoc = $xwiki.getDocument($taskreference))
      #set($taskOtherParticipants = [])
      #if($taskDoc)
            #set($taskOtherParticipantsObj = $taskDoc.getObject("EESCCode.TaskManagerMembersClass"))
            #if($taskOtherParticipantsObj &amp;&amp; $taskOtherParticipantsObj.getValue('assignees') &amp;&amp; $taskOtherParticipantsObj.getValue('assignees') != "")
               #set($taskOtherParticipants = $taskOtherParticipantsObj.getValue('assignees').split(","))
            #end        
      #end
      #set($cond1 = $currentTask.get('assignee') == $services.model.serialize($xcontext.getUserReference(), 'local'))
      #set($cond2 = $taskOtherParticipants.contains($xcontext.getUser()))
      #if($cond1 || $cond2)
        #set($discard = $listMyTasks.add($currentTask))
      #end
    #end
    #set($discard = $listMyProjects.put($projectreference, $currentProject))
  #end
#end
##
## MACRO TO DISPLAY A TASK IN MENU
##
#macro(displayTask $taskMap $level)
  #set($taskreference = $taskMap.get('reference'))
  #set($taskstatus = $taskMap.get('status'))
  #set($taskduedate = $datetool.toDate($taskMap.get('duedate')))
  #set($taskprogress = $taskMap.get('progress'))
  #set($listLevel = '')
  #if($level == 1)
    #set($listLevel = '*')
  #elseif($level == 2)
    #set($listLevel = '**')
  #end
  #set($taskicon = "$services.icon.render('tag')")
  #if($taskduedate.before($datetool.date) &amp;&amp; $taskstatus != 'Done')
    #set($taskicon = "(% style='color:red' %)${taskicon}")
  #end
  #set($taskstatustranslatekey = "TaskManager.TaskManagerClass_status_${taskstatus}")
  #set($taskstatusstr = "[${services.localization.render($taskstatustranslatekey)}] ")
  #set($tasknamestr = "$taskMap.get('name')")
  $listLevel ${taskicon} {{html}}
  &lt;span class="task-manager-dependency-progress"&gt;
    &lt;div class="progress"&gt;
      &lt;div class="progress-bar progress-bar-striped" style="width: $!{taskprogress}%"&gt;
        #if($taskprogress &amp;&amp; $taskprogress != '')
          $!{taskprogress}%
        #else
          0%
        #end
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/span&gt;
  {{/html}} (% class="status status-${taskstatus}" %)${taskstatusstr}[[${tasknamestr}&gt;&gt;${taskreference}]]
#end
##
## ERROR WHEN NOT CONNECTED
##
#if(!$xcontext.getUserReference())
  {{error}}
    ${services.localization.render('eesc.home.unconnected')}
  {{/error}}
#end
##
## LIST MY TASKS
##
#if(!$groupUID)
  == ${services.localization.render('eesc.home.title.mytasks')} ==
  #if($listMyTasks.isEmpty())
    {{info}}${services.localization.render('eesc.home.notask')}{{/info}}
  #else
    {{menu type="vertical"}}## Add/remove 'open' to have the menu expanded/folded by default
      #foreach($task in $listMyTasks)
        #displayTask($task, 1)
      #end
    {{/menu}}
  #end
#end
##
## LIST MY PROJECTS
##
== ${services.localization.render('eesc.home.title.myprojects')} ==
#if($listMyProjects.isEmpty())
  {{info}}${services.localization.render('eesc.home.noproject')}{{/info}}
#else
  {{menu type="vertical collapsible"}}## Add/remove 'open' to have the menu expanded/folded by default
    #foreach($projectEntry in $listMyProjects.entrySet())
      #set($projecticon = "(% class='fa fa-fw fa-inbox' style='font-size: 150%' %)((()))")
      #set($projecttitle = "$projectEntry.value.get('title')")
      #set($projectstr = "${services.localization.render('eesc.home.project')} « ${projecttitle} »")
      * $projecticon [[${projectstr}&gt;&gt;${projectEntry.key}]]
      #foreach($task in $projectEntry.value.get('tasks'))
        #displayTask($task, 2)
      #end
    #end
  {{/menu}}
#end
{{/velocity}}
</content>
</xwikidoc>
